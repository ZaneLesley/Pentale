services:
  frontend:
    profiles: [prod]
    restart: unless-stopped
    build:
      context: ./frontend
      args:
        VITE_API_URL: /backend/api
        VITE_GAME_URL: /backend/game
        VITE_ROOT_URL: /pentale
    working_dir: /app
    volumes:
      - ./frontend/dist:/app/dist
    command: echo "Production build complete."
    ports:
      - "5173:5173"
    depends_on:
      - backend

  frontend-dev:
    profiles: [dev]
    restart: unless-stopped
    build:
      context: ./frontend
      args:
        VITE_API_URL: http://localhost:4000/api
        VITE_GAME_URL: http://localhost:4000/game
        VITE_ROOT_URL: ""
    working_dir: /app
    volumes:
      - ./frontend:/app
    command: npm run dev
    ports:
      - "5173:5173"
    depends_on:
      - backend

  backend:
    build: ./backend
    restart: unless-stopped
    env_file:
      - ./backend/.env
    environment:
      - DATABASE_URL
    command: |
      sh -c "npm install &&
      npx prisma generate &&
      npx prisma db push &&
      node server.js"
    volumes:
      - ./backend:/app
    working_dir: /app
    depends_on:
      - db
    ports:
      - "4000:8080"

# Use postgres/example user/password credentials
  db:
    image: postgres
    restart: always
    # set shared memory limit when using docker compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    #volumes:
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    environment:
      POSTGRES_DB: Pentale
      POSTGRES_USER: zane
      POSTGRES_PASSWORD: shen
    volumes:
      - ./db/init:/docker-entrypoint-initdb.d

  adminer:
    image: adminer
    restart: always
    ports:
      - "8001:8080"